import { iterateAsync } from './iterateAsync.js';
import { mapMaybePromise } from './map-maybe-promise.js';
export function wrapFetchWithHooks(onFetchHooks) {
    return function wrappedFetchFn(url, options, context, info) {
        let fetchFn;
        const onFetchDoneHooks = [];
        return mapMaybePromise(iterateAsync(onFetchHooks, onFetch => onFetch({
            fetchFn,
            setFetchFn(newFetchFn) {
                fetchFn = newFetchFn;
            },
            url,
            setURL(newUrl) {
                url = String(newUrl);
            },
            options,
            setOptions(newOptions) {
                options = newOptions;
            },
            context,
            info,
        }), onFetchDoneHooks), function handleIterationResult() {
            const res$ = fetchFn(url, options, context, info);
            if (onFetchDoneHooks.length === 0) {
                return res$;
            }
            return mapMaybePromise(res$, function (response) {
                return mapMaybePromise(iterateAsync(onFetchDoneHooks, onFetchDone => onFetchDone({
                    response,
                    setResponse(newResponse) {
                        response = newResponse;
                    },
                })), function handleOnFetchDone() {
                    return response;
                });
            });
        });
    };
}
